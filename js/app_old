// commenting out some data to meet Google's limit on # destinations
var recommendations = [{
  name: "Ebisu Garden Place",
  id: "4ca1863779d9b1f7e654c099",
  location: {lat: 35.64279793799042,lng: 139.71346735954285},
  tip: "Good meeting place with other dogs and humans in the neighborhood. Nice benches for relaxing & people watching. Several restaurants have outdoor seatings, where our kind is welcome."
},
// {
//   name: "Ebisu Minami Ichi Koen",
//   id: "4b568b04f964a5209a1428e3",
//   location: {lat: 35.64249277390707,lng: 139.71188485622406},
//   tip: "Typical neighborhood playground. Several nice trees for marking. Good place for pigeon chasing."
// },
{
  name: "Meguro Incinelation Plant Koen",
  id: "4bf75ae25efe2d7fd6fa6834",
  location: {lat: 35.63828860270989,lng: 139.7083522654069},
  tip: "Nice neighborhood park with trees and grassy area. Popular with dogs and usually not busy."
},
{
  name: "Green Dog Daikanyama",
  id: "52662a92498edbab9f134a77",
  location: {lat: 35.64941488424095,lng: 139.7002590478803},
  tip: "Located on a dog-friendly strip mall, Green Dog is a health-conscious dog shop with food, treats, apparel, hotel and spa. Free drinks of water in the store. There is a small dog run there, too. Beware of onsite pet clinic."
},
// {
//   name: "Green Dog Roppongi",
//   id: "4c2211c899282d7fae7966b0",
//   location: {lat: 35.66644025074744,lng: 139.7303009033203},
//   tip: "Large dog shop with lots of treats and apparel (among others). Perfect spot to stop by before/during a walk in the nearby parks."
// },
{
  name: "Familina Garden",
  id: "5914269ac9a51768c57d5955",
  location: {lat: 35.659377,lng: 139.714142},
  tip: "Training school and hotel in fashionable Aoyama area. Teachers are the best and the twice-daily play time is really fun with lots of dogs of all breeds."
},
// {
//   name: "Aoyama Koen (North)",
//   id: "4b5f9b68f964a5203bc429e3",
//   location: {lat: 35.669441282741715,lng: 139.71950406853185},
//   tip: "Neighborhood park with a relatively large grassy area to run around in. Trees make nice shades in the summer."
// },
{
  name: "Donguri Koen",
  id: "4b7f8658f964a520e63230e3",
  location: {lat: 35.63663775732061,lng: 139.7222274541855},
  tip: "Neighborhood playground/park. A hangout place for dogs in the neighborhood in the summer."
},
{
  name: "Showa Kinen Koen",
  id: "4b5bed76f964a520a41d29e3",
  location: {lat: 35.70735314848069,lng: 139.39423084259033},
  tip: "Big, big park in the suburbs. A long way from downtown but worth the trip with several well-maintained dog runs."
},
{
  name: "Tsujido Kaihin Koen",
  id: "4c7e2fe8d598a09374edc462",
  location: {lat: 35.321250590922844,lng: 139.44774484454146},
  tip: "A huge park in Tsujido, Kanagawa that is popular with dogs in the neighborhood. No dog runs here, but between the long stretch of the beach nearby and a large grassy field in the park, your needs for a run will no doubt be satisfied. There is also a dog cafe/apparel shop within a walking distance."
},
{
  name: "Shichiri ga Hama Beach",
  id: "4ba6ab1bf964a520806739e3",
  location: {lat: 35.305308198383585,lng: 139.51074296767837},
  tip:"A non-swimming beach (and hence open to dogs all year) that is nice to walk on and watch the surfers."
},
{
  name: "Yoyogi Koen",
  id: "4b5a3a54f964a520cdb528e3",
  location: {lat: 35.66909479768642,lng: 139.69723746490402},
  tip: "One of the largest parks in central Tokyo. It feels cooler than the city outside it in the summer thanks to the fields and trees. Dog runs are among the largest in Tokyo as well and busy with lots of dogs on weekends."
},
// {
//   name: "Konno Hachimangu",
//   id: "4b504919f964a520c31f27e3",
//   location: {lat: 35.65739628131302,lng: 139.70652209410855},
//   tip: "This is a shrine and it does not really have much for dog entertainment, but occcasional festivals can be fun to watch. If you have a wish, pray to God there, too, and it comes true!"
// },
{
  name: "Wonderful Nature Village",
  id: "560f4ea7498efc11c577831d",
  location: {lat: 35.717343,lng: 139.261731},
  tip: "Located very far from central Tokyo, you can hardly believe this place is still Tokyo. Large dog runs, dog swimming pools and short trails keep you entertained all day. There is even a dog cafe on site!"
},
{
  name: "Koganei Koen",
  id: "4b593bd6f964a520698228e3",
  location: {lat: 35.714792770255876,lng: 139.5181703567505},
  tip: "Large park in the suburbs. Inconvenient to get to, but it has a lot of grassy space and dog runs."
},
{
  name: "Meguro River",
  id: "4f729013e4b0905384b2e359",
  location: {lat: 35.64542883999949,lng: 139.69925165176392},
  tip: "An urban river popular with dogs and joggers. It is extremely crowded during the cherry blossoms, and there are mosquitos in the summer."
},
{
  name: "Hinokimachi Koen",
  id: "4b4d99a9f964a520a5d426e3",
  location: {lat: 35.66679762138858,lng: 139.732586145401},
  tip: "A park/playground in the middle of Roppongi, which is taken care well. There are usually at least a few dogs there and in summer evenings after kids are gone, the park turns into a dog run (though not officially allowed)."
},
{
  name: "National Graduate Institute for Policy Studies",
  id: "4b06467ff964a52040ea22e3",
  location: {lat: 35.664317341779835,lng: 139.72748019245475},
  tip: "This campus has a nice grassy field with lots of trees in the back of the building, which is used as a dog run. "
},
{
  name: "Rinko Park",
  id: "4b5672d5f964a520d11028e3",
  location: {lat: 35.46108941215697,lng: 139.63719606399536},
  tip: "Nice city park with a sizable grassy area and a nice view of the Yokoahama port."
},
{
  name: "Dog Petite Resort Tsunayoshi no Yu",
  id: "4c37fe411e06d13ae019773e",
  location: {lat: 35.616058125635774,lng: 139.7775063166186},
  tip: "Tsunayoshi has an indoor swimming pool (lessons available), a hot spring, and a dog run. Great for big dogs that love water. Dog run is usually not busy."
},
// {
//   name: "Aomi Minami Futo Koen",
//   id: "4b9b186bf964a52049f235e3",
//   location: {lat: 35.6157006623404,lng: 139.7763330347624},
//   tip: "Good park on a man-made island that is usually not busy. You can run around without worrying about bumping into humans or other dogs."
// },
{
  name: "Odaiba Beach",
  id: "4c54f4cd728920a1a51e9383",
  location: {lat: 35.630277,lng: 139.775328},
  tip: "Manmade beach, but the only sandy beach in Tokyo. it can get busy, but it is a lot of fun to walk on it."
},
{
  name: "Ino Forest Dog Garden",
  id: "5251084b11d23360faa61e9b",
  location: {lat: 35.65060102359122,lng: 139.8360013961792},
  tip:"Very good grassy dog runs. There are usually a good number of friendly dogs there. There are enough trees to escape from the sun in the summer."
},
{
  name: "Kiba Koen Dog Run",
  id: "4d215b79756e8cfa750e7554",
  location: {lat: 35.67205458181746,lng: 139.80839442203182},
  tip: "Relatively large park with dog runs. Friendly dogs. No trees so probably too hot in the summer."
},
{
  name: "Mother Farm",
  id: "4de9bd0118386283a3d305a4",
  location: {lat: 35.24760756,lng: 139.940761},
  tip: "Located in the middle of mountains in Chiba. Far from downtown, but several dog runs and lots of farm animals to see."
},
{
  name: "Mt. Jeans Nasu Ski Resort",
  id: "4b7f8d56f964a5201e3430e3",
  location: {lat: 37.12792951449089,lng: 140.0153660774231},
  tip:"Located on top of the mountain is a couple of dog runs, which are covered in snow in the winter. Snowshoe tours for dogs and humans during the ski season, too. Recommended for big active dogs."
},
{
  name: "Yokohama Koen",
  id: "4b5be65ef964a520561c29e3",
  location: {lat: 35.44430982019753,lng: 139.64070352740328},
  tip: "A large park with Yokohama Baseball Stadium. The dog runs there are monitored by dog trainers, so you feel safe. Outside the dog runs is a vast grassy area, which is great to run around in."
},
// {
//   name: "Isetan Department Store (Shinjuku)",
//   id: "4b7af3d1f964a520e3472fe3",
//   location: {lat: 35.69134831090007,lng: 139.7045024884739},
//   tip: "Dogs can enter any Isetan/Mitsukoshi Dept Store in a carry bag. On one of the floors is a dog apparel/gear/food shop, which sells high-quality imported dog wear."
// },
{
  name: "Venus Fort (Mall)",
  id: "4b527802f964a520bf7e27e3",
  location: {lat: 35.6247912631104,lng: 139.779953956604},
  tip: "You can enter one of the floors here on a leash. There are severl pet shops and one of them has a small indoor dog run with agility facilities. There is a dog cafe, too."
},
{
  name: "Urban Dock LaLaport TOYOSU (Mall)",
  id: "4b0587a9f964a520d09e22e3",
  location: {lat: 35.655531243222775,lng: 139.79279105252874},
  tip: "A small part of the mall requires only a leash to enter. There is a good pet shop selling a large selection of toys and apparel, and they have a small dog run just outside. At the mall are also a good number of restaurants with tables outside, which means we are welcome. The dog cafe there is pretty good, too, and the servers absolutely adore us."
},
{
  name: "Aeon Mall Makuhari Shintoshin (Mall)",
  id: "5126e2e3e4b0b2427bc2b9f9",
  location: {lat: 35.653007184502094,lng: 140.03115892410278},
  tip: "Very large mall with one whole building open to dogs on leash. The building is a perfect place to try swimming for the first time. There is a swimming pool and a dog under-water treadmill, and kind instructors are available to teach. There are also pet shops with a large selection of dog wear. When you get tired of it all, you can run around with other dogs in the dog run just outside or sit in one of the cafes (allowed inside!)."
}
];

// Create and initialize map
var map,
    panorama;
// Create a new blank array for all the listing markers.
var markers = [];

function initMap() {
  // customize the map's color scheme
  var styles =
    [{"featureType":"landscape.man_made","elementType":"geometry","stylers":[{"color":"#f7f1df"}]},{"featureType":"landscape.natural","elementType":"geometry","stylers":[{"color":"#d0e3b4"}]},{"featureType":"landscape.natural.terrain","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"poi.business","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi.medical","elementType":"geometry","stylers":[{"color":"#fbd3da"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#bde6ab"}]},{"featureType":"road","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#ffe15f"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#efd151"}]},{"featureType":"road.arterial","elementType":"geometry.fill","stylers":[{"color":"#ffffff"}]},{"featureType":"road.local","elementType":"geometry.fill","stylers":[{"color":"black"}]},{"featureType":"transit.station.airport","elementType":"geometry.fill","stylers":[{"color":"#cfb2db"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#a2daf2"}]}];

  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 35.6471607, lng: 139.7075507},
    zoom: 13,
    styles: styles,
    mapTypeControl: false
  });

  // customize markers and define clickable area
  var markerimg = "img/png/004-dog-pawprint-on-a-heart.png";
  var shape = {
    coords: [0,0, 32, 32],
    type: "rect"
  };

  for (let i=0;i<recommendations.length;i++) {
    var position = recommendations[i].location,
        title = recommendations[i].name,
        tip = recommendations[i].tip,
        foursqid = recommendations[i].id;

    var marker = new google.maps.Marker({
      position: position,
      title: title,
      icon: markerimg,
      shape: shape,
      tip: tip,
      foursqid: foursqid,
      // setting marker animation to null so that it is not undefined
      animation: null
    });

    markers.push(marker);
  }

  // When a marker is clicked info window opens and the marker bounces. At any time, only
  // one marker bounces and one info window is open
  var largeInfowindow = new google.maps.InfoWindow();
  for (let i=0;i<markers.length;i++) {
    markers[i].addListener("click", function() {
      for (i=0;i<markers.length;i++) {
        markers[i].setAnimation(null);
        largeInfowindow.marker = null;
      }
      this.setAnimation(google.maps.Animation.BOUNCE);
      populateInfoWindow(this);
    });
  }

// Show/hide listings button displays/hides all markers on map when clicked
  var markerVisibility = false;
  document.getElementById("markerBtn").addEventListener("click", function() {
    if (!markerVisibility) {
      showMarkers();
      this.value = "Hide All on Map";
      markerVisibility = true;
    } else {
      hideMarkers();
      this.value = "Show All on Map";
      markerVisibility = false;
      largeInfowindow.marker = null;
    }
  });

  // Display list of recommendations on the left
  var resultList = document.getElementById("resultList"),
      list = document.createDocumentFragment();
  for (let i = 0; i < markers.length; i++) {
    var place = document.createElement("li");
    place.id = i;
    place.onclick = function () {
      for (j=0;j<markers.length;j++) {
        hideMarkers();
        markers[j].setAnimation(null);
      }
      markers[i].setMap(map);
      markers[i].setAnimation(google.maps.Animation.BOUNCE);
      populateInfoWindow(markers[i],largeInfowindow);
    }
    place.textContent = markers[i].title;
    list.appendChild(place);
  }
  resultList.appendChild(list);

  document.getElementById('search-within-time').addEventListener('click', function() {
    searchWithinTime();
  });

// end of mapinit
}

// This function will loop through the markers array and display them all.
function showMarkers() {
  var bounds = new google.maps.LatLngBounds();
  for (let i = 0; i < markers.length; i++) {
    // Create markers and place on map
    // Extend the boundaries of the map for each marker and display the marker
    markers[i].setMap(map);
    bounds.extend(markers[i].position);
  }
  map.fitBounds(bounds);
}

// This function will loop through the listings and hide them all.
function hideMarkers() {
  for (var i = 0; i < markers.length; i++) {
    markers[i].setMap(null);
  }
}

// This function populates the infowindow when the marker is clicked. We'll only allow
// one infowindow which will open at the marker that is clicked, and populate based
// on that markers position.
function populateInfoWindow(marker,infowindow) {
  // Check to make sure the infowindow is not already opened on this marker.
  if (infowindow.marker != marker) {
    // Clear the infowindow content to give the streetview time to load.
    infowindow.setContent("");
    infowindow.marker = marker;
    // Make sure the marker property is cleared if the infowindow is closed.
    infowindow.addListener('closeclick', function() {
      infowindow.marker = null;
      // cancel animation on the marker when infowindow is closed
      marker.setAnimation(null);
    });

    var sv = new google.maps.StreetViewService();

    // In case the status is OK, which means the pano was found, compute the
    // position of the streetview image, then calculate the heading, then get a
    // panorama from that and set the options
    function getStreetView(data,status) {
      if (status == "OK") {
        var nearStreetViewLocation = data.location.latLng,
            heading = google.maps.geometry.spherical.computeHeading(nearStreetViewLocation, marker.position);
        infowindow.setContent('<div class="pano-title">' + marker.title + '</div><div id="pano"></div>' + '<div>' + marker.tip + '</div>');
        var panoramaOptions = {
          pano: data.location.pano,
          pov: {
            heading: heading,
            pitch: 10
          },
          visible: true
        };
        var panorama = new google.maps.StreetViewPanorama(document.getElementById("pano"), panoramaOptions);
      } else {
        infowindow.setContent('<div class="pano-title">' + marker.title + '</div>' + '<div>No Street View Found</div>'+ '<div>' + marker.tip + '</div>');
      }
    }
    sv.getPanorama({location: marker.position}, getStreetView);
    infowindow.open(map, marker);
  }
}




// This function allows the user to input a desired travel time, in
// minutes, and a travel mode, and a location - and only show the listings
// that are within that travel time (via that travel mode) of the location
function searchWithinTime() {
  // Initialize the distance matrix service.
  var distanceMatrixService = new google.maps.DistanceMatrixService;
  var address = document.getElementById('search-within-time-text').value;
  // Check to make sure the place entered isn't blank.
  if (address == '') {
    window.alert('You must enter an address.');
  } else {
    hideMarkers();
    // Use the distance matrix service to calculate the duration of the
    // routes between all our markers, and the destination address entered
    // by the user. Then put all the origins into an origin matrix.
    var origin = [address],
        destinations = [];

    for (var i = 0; i < markers.length; i++) {
      destinations[i] = markers[i].position;
    }
    var mode = document.getElementById('mode').value;
    // Now that both the origins and destination are defined, get all the
    // info for the distances between them.
    distanceMatrixService.getDistanceMatrix({
      origins: origin,
      destinations: destinations,
      travelMode: google.maps.TravelMode[mode],
      unitSystem: google.maps.UnitSystem.IMPERIAL,
    }, function(response, status) {
      if (status !== google.maps.DistanceMatrixStatus.OK) {
        window.alert('Error: ' + status);
      } else {
        displayResultsWithinTime(response);
      }
    });
  }
}

// This function will go through each of the results, and,
// if the distance is LESS than the value in the picker, show it on the map.
function displayResultsWithinTime(response) {
  var maxDuration = document.getElementById('max-traveltime').value;
  var bounds = new google.maps.LatLngBounds();
  var origins = response.originAddresses;
  var destinations = response.destinationAddresses;
  // Parse through the results, and get the distance and duration of each.
  // Because there might be  multiple origins and destinations we have a nested loop
  // Then, make sure at least 1 result was found.
  var atLeastOne = false;
  var results = response.rows[0].elements;
  for (var i = 0; i < results.length; i++) {
    var element = results[i];
    if (element.status === "OK") {
      // The distance is returned in feet, but the TEXT is in miles. If we wanted to switch
      // the function to show markers within a user-entered DISTANCE, we would need the
      // value for distance, but for now we only need the text.
      var distanceText = element.distance.text;
      // Duration value is given in seconds so we make it MINUTES. We need both the value
      // and the text.
      var duration = element.duration.value / 60;
      var durationText = element.duration.text;
      if (duration <= maxDuration) {
        markers[i].setMap(map);
        bounds.extend(markers[i].position);
        atLeastOne = true;
        // Create a mini infowindow to open immediately and contain the
        // distance and duration
        var smallInfowindow = new google.maps.InfoWindow();
        smallInfowindow.setContent('<div class="vr-title">'+markers[i].title +
        '</div>' + durationText + ' away, ' + distanceText +
        '<div><input type="button" value="View Route" onclick="displayDirections('
        + i + ')";></input></div>');
        smallInfowindow.open(map, markers[i]);

        // Put this in so that this small window closes if the user clicks
        // the marker, when the big infowindow opens
        markers[i].infowindow = smallInfowindow;
        google.maps.event.addListener(markers[i], 'click', function() {
          this.infowindow.close();
        });
      }
      map.fitBounds(bounds);
    }
  }
  if (!atLeastOne) {
    window.alert('We could not find any locations within that distance!');
  }
};

// This function is in response to the user selecting "show route" on one
// of the markers within the calculated distance. This will display the route
// on the map.
function displayDirections(i) {
  hideListings(smallInfowindow);
  var origin = document.getElementById('search-within-time-text').value,
      destination = markers[i].position;
  var ds = new google.maps.DirectionsService();
  var mode = document.getElementById('mode').value;
  ds.route({
    origin: origin,
    destination: destination,
    travelMode: google.maps.TravelMode[mode]
  }, function(response, status) {
    if (status === google.maps.DirectionsStatus.OK) {
      var directionsDisplay = new google.maps.DirectionsRenderer({
        map: map,
        directions: response,
        draggable: true,
        polylineOptions: {
          strokeColor: 'green'
        }
      });
    } else {
      window.alert('Directions request failed due to ' + status);
    }
  });
}

//
// var ViewModel = function() {
//   // change message on the show/hide recommendations button
//
//
//
//
//
//
// }
//
// ko.applyBindings(new ViewModel());
